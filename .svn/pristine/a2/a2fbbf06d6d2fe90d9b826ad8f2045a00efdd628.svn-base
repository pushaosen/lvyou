package com.itqf.lvyou.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.transaction.Transactional;

import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.itqf.lvyou.WoException;
import com.itqf.lvyou.WoResultCode;
import com.itqf.lvyou.dao.MenuDao;
import com.itqf.lvyou.dao.RoleDao;
import com.itqf.lvyou.model.Menu;
import com.itqf.lvyou.model.Role;
import com.itqf.lvyou.service.MenuService;

/**
 * 菜单业务逻辑处理接口实现类serviceImpl
 * @author Administrator
 *	注意：controller中在service层里要调用的方法最好不要有返回null的情况
 */
@Service
@Transactional
public class MenuServiceImpl implements MenuService {

	@Resource
	private MenuDao menuDao;
	
	@Resource
	private RoleDao roleDao;
	
	// 使用final修饰，每次使用的时候不用重复再创建，可以提高程序性能
	private final WoResultCode NO_TOP = new WoResultCode(1000, "没有顶级菜单");
	// [%s]可以去匹配下面的构造方法中传进来的参数
	private final WoResultCode NO_MENU = new WoResultCode(1001, "ID位[%s]的菜单为找到");
	
	private final WoResultCode CHILD = new WoResultCode(1002, "该菜单下已经有子菜单，无法删除!");
	
	private Menu getMenu(List<Menu> menus,String menuId) {
		for(Menu menu:menus) {
			if (menuId.equals(menu.getId())) {
				return menu;
			}
		}
		return null;
	}

	@Override
	public List<Menu> getAllMenus() {
		return menuDao.getAllMenus();
	}

	@Override
	public void createMenu(Menu menu) {
		menuDao.createMenu(menu);
	}

	@Override
	public Menu getMenuById(String menuId) {
		return menuDao.getMenuById(menuId);
	}

	@Override
	public List<Menu> getMenusByName(String name) {
		if (StringUtils.isEmpty(name)) {
			return menuDao.getAllMenus();
		}
		return menuDao.getMenusByName(name);
	}

	@Override
	public void updateMenu(Menu menu) {
		if (menu.getParent() != null && "".equals(menu.getParent().getName())) {
			menu.setParent(null);
		}
		menuDao.updateMenu(menu);
	}

	@Override
	public void deletMenu(String menuId) {
		Menu m = menuDao.getMenuById(menuId);
		if (m.getChildren() != null && m.getChildren().size() > 0) {
			throw new WoException(CHILD);
		}
		menuDao.deleteMenu(m);
	}
	
	/**
	 * 从menus查找所有顶级菜单     角色有权限的菜单
	 * @param menus
	 * @return
	 */
	private List<Menu> getTopMenus(List<Menu> menus){
		List<Menu> userMenus = new ArrayList<>();
		for(Menu menu:menus) {
			if (menu.getParent() == null) {
				userMenus.add(menu);
			}
		}
		return userMenus;
	}
	
	/**
	 * 从menus查找子菜单    角色权限下的顶级菜单下的子菜单
	 * @param menus
	 * @param parentId
	 * @return
	 */
	private List<Menu> getSubMenusByParent(List<Menu> menus, String parentId){
		List<Menu> userMenus = new ArrayList<>();
		for(Menu menu:menus) {
			if (menu.getParent() != null && menu.getParent().getId().equals(parentId)) {
				userMenus.add(menu);
			}
		}
		return userMenus;
	}
	
	private Map<String, Object> getMenuData(String currentTopId, String currentSubId, List<Menu> menus) {
		// 从数据库，获取所有顶级菜单
		List<Menu> topMenus = getTopMenus(menus);
		// menuDao.getTopMenus();
		if (topMenus.size() == 0) {
			throw new WoException(NO_TOP);
		}
		// 获取当前顶级菜单
		Menu currentTopMenu = null;
		// 获取currentTopMenu下面的所有子菜单
		List<Menu> subMenus = null;
		// 根据currentSubId和subMenus获取当前子菜单
		Menu currentSubMenu = null;
		// 当顶级菜单ID为空时
		if (StringUtils.isEmpty(currentTopId)) {
			// 当前顶级菜单为顶级菜单中的第一个
			currentTopMenu = topMenus.get(0);
			// 获取当前顶级菜单下所有子菜单
			subMenus = getSubMenusByParent(menus, currentTopMenu.getId());
			// menuDao.getSubMenusByParent(currentTopMenu.getId());
			if (subMenus.size() > 0) {
				// 当前子菜单为子菜单列表中第一个
				currentSubMenu = subMenus.get(0);
			}
		} else {// 当顶级菜单ID不为空时
			// 通过currentTopId在topMenus中获取currentTopMenu
			currentTopMenu = this.getMenu(topMenus, currentTopId);
			if (currentTopMenu == null) {
				throw new WoException(NO_MENU, currentTopId);
			}
			// 通过currentTopMenu的id获取subMenus
			subMenus = getSubMenusByParent(menus, currentTopMenu.getId());
			// menuDao.getSubMenusByParent(currentTopMenu.getId());
			// 通过currentSubId从subMenus中获取currentSubMenu
			if (subMenus.size() > 0) {
				if (StringUtils.isEmpty(currentSubId)) {
					currentSubMenu = subMenus.get(0);
				} else {
					currentSubMenu = this.getMenu(subMenus, currentSubId);
				}
			}
		}
		Map<String, Object> data = new HashMap<String, Object>();
		data.put("topMenus", topMenus);
		data.put("currentTopMenu", currentTopMenu);
		data.put("subMenus", subMenus);
		data.put("currentSubMenu", currentSubMenu);
		return data;
	}
	
	@Override
	public Map<String, Object> getMenuData(String currentTopId, String currentSubId) {
		return this.getMenuData(currentTopId, currentSubId, menuDao.getAllMenus());
	}

	@Override
	public Map<String, Object> getMenuData(String roleId, String currentTopId, String currentSubId) {
		Role role = roleDao.getRoleById(roleId);
		if (role.isAdmin()) {
			// 如果角色是管理员   查询所有菜单
			return getMenuData(currentTopId, currentSubId);
		}
		// 如果角色是有权限的   则获取响应的菜单
		return getMenuData(currentTopId, currentSubId, role.getMenus());
	}
}
